### In this file we show a step-by-step example for generating a DeBurijnGraph
###  using paired end reads generated by using the Pseudoseq package

using BioSequenceGraphs
using BioSequences
using Pseudoseq

## First we generate data using a reference file in fasta format.
## Below is a small example for illustrative purposes.

Pseudoseq.sequence("ecoli-ref.fasta", "pe-reads.fastq"; ng = 5000, flen = 700, cov = 1, paired = true, rdlen = 20, err = 0.001)

## This generated a file named "pe-reads.fastq" with coverage 2, read length 250 and error rate 1

 r = FASTQ.Reader(open("pe-reads.fastq", "r"))

read_set = Set{DNASequence}()

for record in r
    push!(read_set,FASTQ.sequence(record))
end


## generate a set of unique kmers from the set of reads of length 10.
## In our case this generated 742343  kmers
    kmer_set = BioSequenceGraphs.new_extract_canonical_kmers(read_set,10)


## At the end we have generated a dbg with Base.length(BioSequenceGraphs.nodes(dbg))=  742343
<<<<<<< HEAD
=======
start = time(); BioSequenceGraphs.new_deBruijn_Constructor(kmer_set); diff  = time()-start
## Finished  in 605.3275558948517


## First  we test the simple path finder on this dbg
>>>>>>> e837ae91cbfe8ae18f58a8c8082260f9f12361e3
